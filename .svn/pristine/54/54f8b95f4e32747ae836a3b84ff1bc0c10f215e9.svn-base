package com.cn7782.management.android;

import android.app.ActivityManager;
import android.app.ActivityManager.RunningAppProcessInfo;
import android.app.AlertDialog;
import android.app.Application;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.location.Criteria;
import android.location.GpsSatellite;
import android.location.GpsStatus;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.provider.Settings;
import android.util.Log;
import android.widget.Toast;

import com.baidu.mapapi.SDKInitializer;
import com.cn7782.management.android.activity.bean.LocationBean;
import com.cn7782.management.android.constants.GlobalConstant;
import com.cn7782.management.android.constants.PreferenceConstant;
import com.cn7782.management.android.db.DBHelper;
import com.cn7782.management.android.offlinemaps.GpsLocation;
import com.cn7782.management.android.offlinemaps.GpsLocationClient;
import com.cn7782.management.android.offlinemaps.GpsLocationClientFactory;
import com.cn7782.management.android.offlinemaps.MobileGpsLocationClient;
import com.cn7782.management.util.SharedPreferenceUtil;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Timer;

public class BaseApplication extends Application {
    private static final String TAG = MobileGpsLocationClient.class
            .getSimpleName();
    public static final String LOCATION_RECEIVER_ACTION = "com.cn7782.loction";
    public static final String LOCATION_SECEIVER_ACTION = "com.cn7782.service.loction";
    LocationManager locationManager;
    MyLoctaionListenr myLocationListener;
    private static BaseApplication application;
    private List<LocationBean> list;
    public Timer timer;
    private int timing = 5000;
    public DBHelper dphelper;
    // 数据库表名
    private String tablename, content, time;
    private static Context mcontext;
    Location mlocation;
    private GpsLocationClient gpsLocationClient;
    private int gpsClientType = 2;

    // 摔落告警时，倒计时
    private int falldownCount = GlobalConstant.FALLDOWN_COUNT;
    // 摔落报警是否在前端对话框中正在倒计时
    private boolean isForegroundCountDown = false;
    //保存坐标点常量
    private final int LOCASAVEFREQUENCY = 2;//坐标保存频率
    private final int LOCASAVEINSETDBNUMBER = 5;//坐标到多少个时才保存到数据库
    private int countLoca = -1;
    private List<LocationBean> tempList;
    int count = 0; // 总次数
    int criticalWalkValue = 6;
    //监听状态
    private static int isLocation = 0;

    private void createGpsLocationClient() {
        this.gpsLocationClient = GpsLocationClientFactory.getGpsLocationClient(
                gpsClientType, this);
    }

    public GpsLocation getLocation(final Context mContext) {

        if (!this.gpsLocationClient.gpsIsOpen()) {
            new AlertDialog.Builder(mContext).setTitle("GPS未打开")
                    .setMessage("请进入GPS设置界面设置")
                    .setPositiveButton("确定", new OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            Intent intent = new Intent(
                                    Settings.ACTION_LOCATION_SOURCE_SETTINGS);
                            mContext.startActivity(intent);
                        }
                    }).setNegativeButton("取消", null).show();

        }

        return this.gpsLocationClient.getLocation();
    }

    @Override
    public void onCreate() {
        super.onCreate();
        SDKInitializer.initialize(this);
        application = this;
        mcontext = this.getApplicationContext();

//		CrashHandler crashHandler = CrashHandler.getInstance();
//        crashHandler.init(getApplicationContext());
        ImageLoader.getInstance().init(ImageLoaderConfiguration.createDefault(mcontext));
    }

    boolean isSendBroadCast = false;

    /**
     * 单例模式
     *
     * @return
     */
    public synchronized static BaseApplication getInstance() {
        if (null == application) {
            application = new BaseApplication();
        }
        return application;
    }

    /**
     * 判断当前应用是否处于前台运行
     *
     * @param context
     * @return
     */
    public boolean isAppOnForeground(Context context) {
        ActivityManager activityManager = (ActivityManager) context
                .getSystemService(Context.ACTIVITY_SERVICE);
        List<RunningAppProcessInfo> appProcesses = activityManager
                .getRunningAppProcesses();
        if (appProcesses == null)
            return false;
        for (RunningAppProcessInfo appProcess : appProcesses) {
            if (appProcess.processName.equals(context.getPackageName())) {
                if (appProcess.importance == RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {
                    return true;
                }
            }
        }
        return false;
    }

    public boolean isSendBroadCast() {
        return isSendBroadCast;
    }

    public void setSendBroadCast(boolean isSendBroadCast) {
        this.isSendBroadCast = isSendBroadCast;
    }

    /***
     * 发起gps定位 不用百度的
     */
    public void startGPSLoctaion() {
        Log.d("coder", "==startLoctaion==");

        // ToastUtil.showMessage(this, "正在定位...");

        if (null == myLocationListener) {
            myLocationListener = new MyLoctaionListenr();

        }
        if (locationManager == null)
            locationManager = (LocationManager) this
                    .getSystemService(Context.LOCATION_SERVICE);

        //检查是否开启GPS
        if (!locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)) {
            Toast.makeText(
                    BaseApplication.getInstance().getApplicationContext(),
                    "请开启GPS...", Toast.LENGTH_SHORT).show();
            return;
        }
        try {
            // 查询条件
            String bestProvider = locationManager.getBestProvider(
                    getCriteria(), true);
            Criteria criteria = getCriteria();
            String a = locationManager.getBestProvider(criteria, true);
            mlocation = locationManager.getLastKnownLocation(a);
            // 监听状态
            locationManager.addGpsStatusListener(listener);

            //第二个参数是接收通知的最小时间间隔，第三个参数是通知之间最小的距离间隔
            locationManager.requestLocationUpdates(
                    LocationManager.GPS_PROVIDER, 0, 0,
                    myLocationListener);

        } catch (Exception e) {
            Log.e("application", e.getMessage());
            e.printStackTrace();
        }

    }

    public void stopGPSLoctaion() {
        Log.d("coder", "==stopGPSLoctaion==");

        // ToastUtil.showMessage(this, "正在定位...");

        locationManager.removeGpsStatusListener(listener);
    }

    /***
     * description：
     *
     * @author: coder
     * @create: 2015-01-14 上午10:50:46
     * @version: Ver 1.0
     * @copyright 商脉网络科技 Corporation 2013 版权所有
     */
    class MyLoctaionListenr implements LocationListener {

        @Override
        public void onLocationChanged(Location location) {
//			if(tempList == null){
//				tempList = new ArrayList<LocationBean>((LOCASAVEINSETDBNUMBER+2));
//			}
            LocationBean loc = null;

            if (null != location) {
                double Latitude = location.getLatitude();
                double Longitude = location.getLongitude();
                // 时间
                long gettime = location.getTime();
                Date d = new Date(gettime);
                SimpleDateFormat sdf = new SimpleDateFormat(
                        "yyyy-MM-dd HH:mm:ss");
                String timeData = sdf.format(d);
                // 速度
                double speed = location.getSpeed();
                try {

                    if (isSendBroadCast()) {
                        Intent intent = new Intent();
                        intent.setAction(LOCATION_RECEIVER_ACTION);
                        intent.putExtra("lat", Latitude);
                        intent.putExtra("lng", Longitude);
                        intent.putExtra("time", gettime);
                        intent.putExtra("speed", speed);
                        sendBroadcast(intent);

                        loc = initLocate(Latitude, Longitude, speed, timeData);
                        artificial(tablename, loc);
                    }
                    if (null != myLocationListener) {
                        locationManager.removeUpdates(myLocationListener);
                    }

                    //当坐标少于LOCASAVEINSETDBNUMBER并且每 LOCASAVEFREQUENCY个坐标取一个
//					if(countLoca!=-1 &&tempList.size()<LOCASAVEINSETDBNUMBER){
//						if(countLoca == LOCASAVEFREQUENCY){
//						    loc = initLocate(Latitude, Longitude, speed,timeData);
//							tempList.add(loc);
//							countLoca = 1;	
//						}else{
//							countLoca++;
//						}
//						return;
//					}
//					countLoca = 1;
//					loc = initLocate(Latitude, Longitude, speed,timeData);
//					tempList.add(loc);
//					transaction(tablename,tempList);
//					tempList.clear();


                } catch (Exception e) {
                    e.printStackTrace();
                    Toast.makeText(
                            BaseApplication.getInstance()
                                    .getApplicationContext(),
                            "拿点报错..." + Latitude + " " + Longitude + " "
                                    + speed, Toast.LENGTH_SHORT).show();
                }
            }
        }

        // }

        @Override
        public void onProviderDisabled(String arg0) {

        }

        @Override
        public void onProviderEnabled(String arg0) {

        }

        @Override
        public void onStatusChanged(String arg0, int arg1, Bundle arg2) {

        }

    }

    // 状态监听
    GpsStatus.Listener listener = new GpsStatus.Listener() {
        public void onGpsStatusChanged(int event) {
            switch (event) {
                // 第一次定位
                case GpsStatus.GPS_EVENT_FIRST_FIX:
                    Log.i(TAG, "第一次定位");
                    Toast.makeText(
                            BaseApplication.getInstance().getApplicationContext(),
                            "第一次定位", Toast.LENGTH_SHORT).show();
                    break;
                // 卫星状态改变
                case GpsStatus.GPS_EVENT_SATELLITE_STATUS:
                    Log.i(TAG, "卫星状态改变");
                    // 获取当前状态
                    GpsStatus gpsStatus = locationManager.getGpsStatus(null);
                    // 获取卫星颗数的默认最大值
                    int maxSatellites = gpsStatus.getMaxSatellites();
                    // 创建一个迭代器保存所有卫星
                    Iterator<GpsSatellite> iters = gpsStatus.getSatellites()
                            .iterator();
                    int count = 0;
                    while (iters.hasNext() && count <= maxSatellites) {
                        GpsSatellite s = iters.next();
                        count++;
                    }
                    Log.i(TAG, "搜索到：" + count + "颗卫星");
                    break;
                // 定位启动
                case GpsStatus.GPS_EVENT_STARTED:
                    Log.i(TAG, "定位启动");
                    Toast.makeText(
                            BaseApplication.getInstance().getApplicationContext(),
                            "定位启动", Toast.LENGTH_SHORT).show();
                    break;
                // 定位结束
                case GpsStatus.GPS_EVENT_STOPPED:
                    Log.i(TAG, "定位结束");
                    break;
            }
        }

        ;
    };

    private LocationBean initLocate(double lat, double lng, double speed, String timeData) {
        LocationBean loc = new LocationBean();

        loc.setLatitude(lat);
        loc.setLongitude(lng);
        loc.setTime(timeData);
        loc.setSpeed(speed);

        getCriticalPostion(speed);
        boolean pathStatus = SharedPreferenceUtil.getBooleanDataByKey(this, PreferenceConstant.COLOR_STATUS_KEY, false);
        if (pathStatus) {
            loc.setPathType(1);
        } else {
            loc.setPathType(2);
        }
        return loc;
    }

    /***
     * 判断临界点
     *
     * @param speed
     */
    public boolean getCriticalPostion(double speed) {
        if (speed >= GlobalConstant.DRIVESPEED) {// 已经开车了
            // isSuccess = true;
            count = 0;// 立即切换
            SharedPreferenceUtil.saveBooleanDataToSharePreference(this, PreferenceConstant.COLOR_STATUS_KEY, true);
        } else {
            count++;
            if (count >= criticalWalkValue) {
                SharedPreferenceUtil.saveBooleanDataToSharePreference(this, PreferenceConstant.COLOR_STATUS_KEY, false);
            }
        }
        return false;
    }

    /**
     * 返回查询条件
     *
     * @return
     */
    private Criteria getCriteria() {
        Criteria criteria = new Criteria();
        // 设置定位精确度 Criteria.ACCURACY_COARSE比较粗略，Criteria.ACCURACY_FINE则比较精细
        criteria.setAccuracy(Criteria.ACCURACY_FINE);
        // 设置是否要求速度
        criteria.setSpeedRequired(false);
        // 设置是否允许运营商收费
        criteria.setCostAllowed(false);
        // 设置是否需要方位信息
        criteria.setBearingRequired(false);
        // 设置是否需要海拔信息
        criteria.setAltitudeRequired(false);
        // 设置对电源的需求
        criteria.setPowerRequirement(Criteria.POWER_LOW);
        return criteria;
    }


    public void artificial(String tablename, LocationBean bean) {
        if (dphelper == null) {
            Toast.makeText(
                    BaseApplication.getInstance().getApplicationContext(),
                    "数据库异常", Toast.LENGTH_SHORT).show();
            return;
        }

        dphelper.insertTalbe("", bean.getTime(), bean.getSpeed(), bean.getLatitude(),
                bean.getLongitude(), bean.getPathType(), tablename);
    }

    public void getDBHelper(DBHelper dp, String mtablename) {
        this.dphelper = dp;
        this.tablename = mtablename;
    }

    public void getContext(Context dp) {
        this.mcontext = dp;
    }

    public DBHelper getDBHelper() {
        return dphelper;
    }

    public synchronized void setIsForegroundCountDown(boolean value) {
        isForegroundCountDown = value;
    }

    public synchronized boolean getIsForegroundCountDownn() {
        return isForegroundCountDown;
    }

    public synchronized void setFallDownCount(int value) {
        falldownCount = value;
    }

    // 离线service是否开启
    public synchronized int getFallDownCount() {
        return falldownCount;
    }

    public synchronized void setIsLocation(int value) {
        isLocation = value;
    }

    public synchronized int getIsLocation() {
        return isLocation;
    }

}
